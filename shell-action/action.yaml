name: shell
description: Composite action which run shell command(s) and capture/print output
author: Vladimir Chirikov
branding:
  color: gray-dark
  icon: hash
inputs:
  commands:
    required: true
    description: >-
      The bash command(s) to run. The stdout/stderr will be streamed to tty and captured to the output variable or a file.
      You can set multiple commands line by line. The latest command will be captured or the first which returns
      the non-zero exit code. Exit code will be used as result of the action.
      You can use $out to get previous command output (will be truncated, because gh limits),
      exit_code to get previous command exit_code and $cmd to get the current command line if it's needed.
  grouping:
    required: false
    description: Create a group foreach command. Use "true"/"false" strings.
    default: "true"
  truncate:
    required: false
    description: >-
      gh action output is limited by https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      at least, so it's a bad practice to have a big output from an action, this parameter is size to tail
      output from the last command
    default: 10kB
  out-file:
    required: false
    description: if defined will contain full output (stdout/strerr) from the last command
    default: ""
outputs:
  out:
    description: "Captured output of the command"
    value: ${{ steps.cmd.outputs.out }}
  dynamic:
    description: JSON dictionary of dynamic output values
    value: ${{ toJson(steps.cmd.outputs) }}
runs:
  using: composite
  steps:
    - name: Run the commands
      id: cmd
      shell: bash --noprofile --norc {0}
      env:
        commands: ${{ inputs.commands }}
        grouping: ${{ inputs.grouping }}
        truncate: ${{ inputs.truncate }}
        outFile: ${{ inputs.out-file }}
      run: |-
        exit_code=1
        exec 5>&1
        while read -r cmd;
        do
          if [[ ! -z "$cmd" ]]; then
            if [[ "$grouping" = "true" ]]; then
              escaped="${cmd//'%'/'%25'}" ; escaped="${escaped//$'\n'/'%0A'}" ; escaped="${escaped//$'\r'/'%0D'}"
              echo "::group::$escaped"
            fi;
            out=$(set -o pipefail; eval $cmd 2>&1 | tee >(cat - >&5) ; exit ${PIPESTATUS[0]})
            if [[ ! -z "$outFile" ]]; then
              echo "$out" > $outFile
            fi;
            exit_code=$?
            [[ "$grouping" = "true" ]] && echo "::endgroup::"
            if [ $exit_code -ne 0 ]; then
              break;
            fi;
          fi;
        done <<< "$commands";
        delimiter="__gh_1oFF__" ; eol=$'\n'
        key='out'; val=$(echo "$out" | tail -c "$truncate")
        echo "${key}<<${delimiter}${eol}${val}${eol}${delimiter}" >> $GITHUB_OUTPUT
        exec 5>&-
        exit $exit_code
